<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>bajalovic.github.io</title>
   
   <link>http://esseworks.com</link>
   <description>Personal blog</description>
   <language>en-uk</language>
   <managingEditor> Ivan Bajalović</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Humanize Seconds</title>
	  <link>/humanize-seconds</link>
	  <author>Ivan Bajalović</author>
	  <pubDate>2015-11-10T10:11:00+01:00</pubDate>
	  <guid>/humanize-seconds</guid>
	  <description><![CDATA[
	     <p>This is a little helper that can I use for string representation of a seconds. It will say how many days, hours, minutes or seconds there is in a input value.</p>

<h3>Humanize seconds helper</h3>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="k">def</span> <span class="nf">humanize_seconds</span> <span class="n">secs</span><span class="p">,</span> <span class="n">full</span> <span class="o">=</span> <span class="kp">false</span>
      <span class="o">[[</span><span class="mi">60</span><span class="p">,</span> <span class="ss">:seconds</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">60</span><span class="p">,</span> <span class="ss">:minutes</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">24</span><span class="p">,</span> <span class="ss">:hours</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">1000</span><span class="p">,</span> <span class="ss">:days</span><span class="o">]].</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">count</span><span class="p">,</span> <span class="nb">name</span><span class="o">|</span>
        <span class="k">if</span> <span class="n">secs</span> <span class="o">&gt;</span> <span class="mi">0</span>
          <span class="n">secs</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">secs</span><span class="o">.</span><span class="n">divmod</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
          <span class="n">trans</span> <span class="o">=</span> <span class="nb">name</span>
          <span class="n">trans</span> <span class="o">=</span> <span class="n">full</span> <span class="p">?</span> <span class="s2">&quot; </span><span class="si">#{</span><span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;global.time.</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">:</span> <span class="no">I18n</span><span class="o">.</span><span class="n">t</span><span class="p">(</span><span class="s2">&quot;global.time.short.</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
          <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="o">.</span><span class="n">to_i</span><span class="si">}#{</span><span class="n">trans</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="k">end</span>
      <span class="p">}</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
    <span class="k">end</span>
</code></pre></div><div class="highlight"><pre><code class="language-text" data-lang="text">   en:
     time:
      seconds: &quot;seconds&quot;
      minutes: &quot;minutes&quot;
      hours: &quot;hours&quot;
      days: &quot;days&quot;
      short:
        seconds: &quot;s&quot;
        minutes: &quot;m&quot;
        hours: &quot;h&quot;
        days: &quot;d&quot;
</code></pre></div>
<p>Use it like this </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;%=</span> <span class="n">humanize</span> <span class="mi">343</span> <span class="o">%&gt;</span>
</code></pre></div>
<p>and you should get <code>5m 43s</code>. Or, </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;%=</span> <span class="n">humanize</span> <span class="mi">343</span><span class="p">,</span> <span class="kp">true</span> <span class="o">%&gt;</span>
</code></pre></div>
<p>and you should get <code>5 minutes 43 seconds</code>.</p>

<p>Enjoy.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Rails Engine Intro</title>
	  <link>/rails-engine-intro</link>
	  <author>Ivan Bajalović</author>
	  <pubDate>2015-11-10T00:38:00+01:00</pubDate>
	  <guid>/rails-engine-intro</guid>
	  <description><![CDATA[
	     <p>You probably already used a lot of gems that are actually a rails engine, e.g. <code>ActiveAdmin</code>, <code>Devise</code>, <code>Forem</code>, <code>Spree</code>, ...</p>

<p>I needed to create an independent part on my previous project, and it should not share the resources with the rest of the project. Initially, I thoght to create just a namespace, put controllers, views inside and use it like that. But then, I noticed that I should separate my assets, so this subproject do not load unnecessary javascript/css files. </p>

<p>Then I remembered, Rails engine will do the trick. It works as a gem, that you can use inside your app, by requiring it in <code>Gemfile</code>.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ cd myapp
$ rails plugin new admin --mountable
</code></pre></div>
<p>This will generate a <code>admin/</code> directory inside your <code>myapp</code> directory. It will contain <code>app</code>, <code>bin</code>, <code>config</code>, <code>lib</code>, <code>test</code> folders and <code>Gemfile</code>, <code>Rakefile</code> and <code>admin.gemspec</code>.</p>

<p>Edit your gemspec file. Initially, you will have &quot;TODO&quot; texts. In order to run <code>bundle install</code> you must remove &quot;TODO&quot; or &quot;FIXME&quot; form gemspec file.</p>

<p>Next, open your <code>Gemfile</code> and add:</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">gem &#39;admin&#39;, path: &#39;admin&#39;
</code></pre></div>
<p>This will load your plugin as a gem. Now, we need to tell the router which url to point to our plugin. Run <code>bundle install</code>.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mount</span> <span class="no">Admin</span><span class="o">::</span><span class="no">Engine</span><span class="p">,</span> <span class="ss">at</span><span class="p">:</span> <span class="s2">&quot;/admin/&quot;</span>
</code></pre></div>
<p>Lets create <code>welcome_controller.rb</code> inside the <code>myapp/admin/app/controllers/admin/welcome_controller.rb</code>. </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">WelcomeController</span> <span class="o">&lt;</span> <span class="no">Admin</span><span class="o">::</span><span class="no">ApplicationController</span>

    <span class="k">def</span> <span class="nf">index</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>and appropriate view located at <code>myapp/admin/app/views/admin/welcome/index.html.erb</code>.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="no">World</span><span class="o">!&lt;</span><span class="sr">/h1&gt;</span>
</code></pre></div>
<p>Open <code>myapp/admin/config/routes.rb</code> and set root:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Admin</span><span class="o">::</span><span class="no">Engine</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
  <span class="n">root</span> <span class="s1">&#39;welcome#index&#39;</span>
<span class="k">end</span>
</code></pre></div>
<p>Start the server with <code>rails s</code> inside <code>myapp</code> directory, and open <code>http://localhost:3000/admin/</code>. If everything went ok, you should see &quot;Hello World!&quot; message.</p>

<p>You can define models for a engine itself, or you can access the ones from the hosting app.</p>

<p>If you want to use some external gems, you should add a dependency in <code>myapp/admin/admin.gemspec</code>.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">s</span><span class="o">.</span><span class="n">add_dependency</span> <span class="s1">&#39;gem_you_want_to_include&#39;</span>
</code></pre></div>
<p>And then, you need to require it in <code>myapp/admin/lib/admin/engine.rb</code> </p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;gem_you_want_to_include&#39;</span>
</code></pre></div>
<p>Do not forget to run <code>bundle install</code> after these changes.</p>

<p>For further reading, please read <a href="http://guides.rubyonrails.org/engines.html">Getting Started with Engines</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Json Api Namespaced Models</title>
	  <link>/json-api-namespaced-models</link>
	  <author>Ivan Bajalović</author>
	  <pubDate>2015-11-06T16:48:00+01:00</pubDate>
	  <guid>/json-api-namespaced-models</guid>
	  <description><![CDATA[
	     <p>If you want to have a resource that needs access to a namespaced model, you can overwrite the <code>resource_type_for(model)</code> method from <code>JSONAPI::Resource</code> module.</p>

<p>For example, I have a model placed at <code>app/models/weather/alert.rb</code>, and I created a resource at <code>app/resources/api/v1/weather_alert_resource.rb</code>.</p>

<p>Note that resource is not namespaced.</p>

<p>I extended the <code>resource_type_for(model)</code> in my <code>WeatherAlertResource</code> like this:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby">    <span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">V1</span><span class="o">::</span><span class="no">WeatherAlertResource</span> <span class="o">&lt;</span> <span class="no">JSONAPI</span><span class="o">::</span><span class="no">Resource</span>
      <span class="n">attributes</span> <span class="ss">:country</span><span class="p">,</span> <span class="ss">:town</span><span class="p">,</span> <span class="ss">:from</span><span class="p">,</span> <span class="ss">:expires</span><span class="p">,</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">:alert_type</span>
      <span class="n">model_name</span> <span class="s1">&#39;Weather::Alert&#39;</span>

      <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
        <span class="k">def</span> <span class="nf">resource_type_for</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
          <span class="s1">&#39;api/v1/weather_alert&#39;</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
</code></pre></div>
<p>and now I can make a <code>GET /api/v1/weather_alerts</code> and everything works fine.</p>

	  ]]></description>
	</item>

	<item>
	  <title>JSON API Multi Lang Support</title>
	  <link>/json-api-multilang</link>
	  <author>Ivan Bajalović</author>
	  <pubDate>2015-11-06T11:18:00+01:00</pubDate>
	  <guid>/json-api-multilang</guid>
	  <description><![CDATA[
	     <p>I started using <code>jsonapi-resources</code> gem in order to create a JSON API according to JSON schema  defined by http://jsonapi.org/</p>

<p>I encountered the issue with multi-lang support. </p>

<p>In my Ruby on Rails project I am using <code>globalize</code> gem for multilang model attribute translations.</p>

<p>I started using <code>globalize-accessors</code> gem as well, as they provide getters and setters for translated fields.</p>

<p>This is the JSON response for </p>

<p><strong>GET /api/v1/pages/8</strong></p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;8&quot;</span><span class="p">,</span>
    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;pages&quot;</span><span class="p">,</span>
    <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;/api/v1/pages/8&quot;</span>
    <span class="p">},</span>
    <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
      <span class="nt">&quot;slug&quot;</span><span class="p">:</span> <span class="s2">&quot;testing-translations&quot;</span><span class="p">,</span>
      <span class="nt">&quot;translations&quot;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="nt">&quot;locale&quot;</span><span class="p">:</span> <span class="s2">&quot;en&quot;</span><span class="p">,</span>
          <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Testing Translations&quot;</span><span class="p">,</span>
          <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;strong&gt;Lorem&lt;/strong&gt; ipsum dolor sit amet&quot;</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="nt">&quot;locale&quot;</span><span class="p">:</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span>
          <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Testing Übersetzungen&quot;</span><span class="p">,</span>
          <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">},</span>
        <span class="p">{</span>
          <span class="nt">&quot;locale&quot;</span><span class="p">:</span> <span class="s2">&quot;fr&quot;</span><span class="p">,</span>
          <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Essais Traductions&quot;</span><span class="p">,</span>
          <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="kc">null</span>
        <span class="p">}</span>
      <span class="err">}</span>
    <span class="err">}</span>
  <span class="err">}</span>
<span class="err">}</span>
</code></pre></div>
<p>I defined PageResource  as</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">attributes</span> <span class="ss">:slug</span><span class="p">,</span> <span class="ss">:translations</span>

<span class="k">def</span> <span class="nf">translations</span>
    <span class="n">translations</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="no">Page</span><span class="o">.</span><span class="n">globalize_locales</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">locale</span><span class="o">|</span>
      <span class="n">translations</span> <span class="o">&lt;&lt;</span>  <span class="p">{</span>
          <span class="ss">locale</span><span class="p">:</span> <span class="n">locale</span><span class="p">,</span>
          <span class="ss">title</span><span class="p">:</span> <span class="vi">@model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;title_</span><span class="si">#{</span><span class="n">locale</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">),</span>
          <span class="ss">body</span><span class="p">:</span> <span class="vi">@model</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;body_</span><span class="si">#{</span><span class="n">locale</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="k">end</span>
    <span class="n">translations</span>
  <span class="k">end</span>
</code></pre></div>
<p>This will generate a flatten relationship output. </p>

<p>In order to update translations in same manner, I had to enable translations through the strong parameters</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">page_params</span>
    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:data</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">attributes</span><span class="p">:</span> <span class="o">[</span><span class="ss">:slug</span><span class="p">,</span> <span class="ss">translations</span><span class="p">:</span> <span class="o">[</span><span class="ss">:locale</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="o">]]</span><span class="p">)</span>
  <span class="k">end</span>
</code></pre></div>
<p>As this will call <code>translations=(data)</code> on Page instance, I created this method:</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">translates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
  <span class="n">globalize_accessors</span>

  <span class="n">validates</span> <span class="ss">:slug</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>

  <span class="k">def</span> <span class="nf">translations</span><span class="o">=</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">data</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="o">|</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;title_</span><span class="si">#{</span><span class="n">o</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">o</span><span class="o">[</span><span class="ss">:title</span><span class="o">]</span><span class="p">)</span> <span class="k">unless</span> <span class="n">o</span><span class="o">[</span><span class="ss">:title</span><span class="o">].</span><span class="n">blank?</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&quot;body_</span><span class="si">#{</span><span class="n">o</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">o</span><span class="o">[</span><span class="ss">:body</span><span class="o">]</span><span class="p">)</span> <span class="k">unless</span> <span class="n">o</span><span class="o">[</span><span class="ss">:body</span><span class="o">].</span><span class="n">blank?</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>That&#39;s it.</p>

<p>According to the schema, the PATCH (or POST) request would be:</p>
<div class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;pages&quot;</span><span class="p">,</span>
        <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&quot;slug&quot;</span><span class="p">:</span> <span class="s2">&quot;test-ing&quot;</span><span class="p">,</span>
            <span class="nt">&quot;translations&quot;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&quot;locale&quot;</span><span class="p">:</span> <span class="s2">&quot;en&quot;</span><span class="p">,</span>
                    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Testing Translations&quot;</span><span class="p">,</span>
                    <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;Lorem ipsum dolor sit amet&quot;</span>
                <span class="p">},</span>
                <span class="p">{</span>
                    <span class="nt">&quot;locale&quot;</span><span class="p">:</span> <span class="s2">&quot;de&quot;</span><span class="p">,</span>
                    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Testing Übersetzungen&quot;</span><span class="p">,</span>
                    <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;Einige Blindtext sollte hier gehen&quot;</span>
                <span class="p">},</span>
                <span class="p">{</span>
                    <span class="nt">&quot;locale&quot;</span><span class="p">:</span> <span class="s2">&quot;fr&quot;</span><span class="p">,</span>
                    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Essais Traductions&quot;</span>
                    <span class="s2">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;Certains faux texte devrait aller ici&quot;</span>
                <span class="p">}</span>
            <span class="p">]</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
